// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id    Int      @id @default(autoincrement())
  username   String   @unique
  password   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  videos     Video[]
  comments   Comment[]
  likes      Like[]
  dislikes   Dislike[]
  reports    Report[]
  
  @@map("users")
}

model Video {
  id        Int       @id @default(autoincrement())
  user_id   Int
  hash      String    @unique
  caption   String?
  tags      String[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  user      User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  comments  Comment[]
  likes     Like[]
  dislikes  Dislike[]
  reports   Report[]
  
  @@map("videos")
}

model Comment {
  id        Int       @id @default(autoincrement())
  video_id  Int
  user_id   Int
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  video     Video     @relation(fields: [video_id], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  
  @@map("comments")
}

model Like {
  id        Int       @id @default(autoincrement())
  video_id  Int
  user_id   Int
  createdAt DateTime  @default(now())
  
  // Relations
  video     Video     @relation(fields: [video_id], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  
  // Ensure a user can only like a video once
  @@unique([video_id, user_id])
  @@map("likes")
}

model Dislike {
  id        Int       @id @default(autoincrement())
  video_id  Int
  user_id   Int
  createdAt DateTime  @default(now())
  
  // Relations
  video     Video     @relation(fields: [video_id], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  
  // Ensure a user can only dislike a video once
  @@unique([video_id, user_id])
  @@map("dislikes")
}

model Report {
  id        Int       @id @default(autoincrement())
  video_id  Int
  user_id   Int
  reason    String
  createdAt DateTime  @default(now())
  
  // Relations
  video     Video     @relation(fields: [video_id], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  
  // Ensure a user can only report a video once for the same reason
  @@unique([video_id, user_id])
  @@map("reports")
}
